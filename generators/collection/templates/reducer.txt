// @flow

import {
  RESET_<%= upperCaseName %>,
  UPDATE_<%= upperCaseName %>,
  ADD_<%= upperCaseName %>,
  REMOVE_ITEM_<%= upperCaseName %>,
} from 'constants/<%= name %>';

import type { <%= capitalizeName %> } from 'types/State';
import type { Action } from 'types/Store';

const initialState: <%= capitalizeName %> = [];

export default (state: <%= capitalizeName %> = initialState, action: Action) => {
  switch (action.type) {
    case RESET_<%= upperCaseName %>: {
      return action.payload ? [...action.payload] : [...initialState];
    }
    case UPDATE_<%= upperCaseName %>: {
      const payload = action.payload;
      if (Array.isArray(payload)) {
        return state.map((item) => {
          const data = payload.find(params => params.id === item.id);
          return data ? { ...item, ...data } : { ...item };
        });
      }
      const data = state.map((item) => {
        if (item.id !== payload.id) return { ...item };
        return { ...item, ...payload };
      });
      return [...data];
    }
    case REMOVE_ITEM_<%= upperCaseName %>: {
      const payload = action.payload;
      const data = state.reduce((container, item) => {
        if (item.id !== payload.id) {
          container.push(item);
        }
        return container;
      }, []);
      return [...data];
    }
    case ADD_<%= upperCaseName %>: {
      return [action.payload, ...state];
    }
    default: {
      return state;
    }
  }
};
